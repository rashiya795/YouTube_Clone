//Header.jsx





// import { GrYoutube } from "react-icons/gr";
// import { CiSearch, CiBellOn } from "react-icons/ci";
// import { AiFillAudio } from "react-icons/ai";
// import { GoPlus } from "react-icons/go";
// import { RxHamburgerMenu } from "react-icons/rx";
// import { useSidebar } from "./SideBarProvider";
// import { Link, useLocation, useNavigate } from "react-router-dom";
// import { useEffect, useState } from "react";
// import { useSearch } from "./SearchContext";

// export default function Header() {
//   const { toggleSidebar } = useSidebar();
//   const { setSearchTerm } = useSearch();
//   const [username, setUsername] = useState(null);
//   const [showMenu, setShowMenu] = useState(false);
//   const [showCreateMenu, setShowCreateMenu] = useState(false);
//   const [inputValue, setInputValue] = useState("");
//   const [channelExists, setChannelExists] = useState(false);
//   const [userChannel, setUserChannel] = useState(null);

//   const location = useLocation();
//   const navigate = useNavigate();

//   // Fetch user channel
//   const checkUserChannel = async () => {
//     const token = localStorage.getItem("token");
//     if (!token) return;

//     try {
//       const res = await fetch("http://localhost:5000/api/channels/me", {
//         headers: { Authorization: `Bearer ${token}` },
//       });

//       if (res.ok) {
//         const data = await res.json();
//         setChannelExists(true);
//         setUserChannel(data);
//         localStorage.setItem("channel", JSON.stringify(data));
//       } else {
//         setChannelExists(false);
//         setUserChannel(null);
//         localStorage.removeItem("channel");
//       }
//     } catch (err) {
//       console.error("Error fetching channel:", err);
//       setChannelExists(false);
//       setUserChannel(null);
//     }
//   };

//   useEffect(() => {
//     const storedUsername = localStorage.getItem("email");
//     if (storedUsername) setUsername(storedUsername);

//     checkUserChannel();
//   }, [location.pathname]);

//   const handleLogout = () => {
//     localStorage.removeItem("email");
//     localStorage.removeItem("token");
//     setUsername(null);
//     setChannelExists(false);
//     setUserChannel(null);
//   };

//   const handleSearch = () => {
//     setSearchTerm(inputValue);
//   };

//   const handleClickYourChannel = () => {
//     if (userChannel) {
//       navigate(`/channel/${userChannel._id}`);
//     }
//   };

//   return (
//     <div className="w-full ">
//       <header className="flex justify-around w-full lg:px-5 py-2 lg:gap-5">
//         {/* Hamburger */}
//         <div className="text-2xl flex justify-center items-center hover:bg-gray-200 rounded-full px-3 py-1">
//           <button onClick={toggleSidebar}>
//             <RxHamburgerMenu />
//           </button>
//         </div>

//         {/* Logo */}
//         <div className="flex items-center">
//           <div className="text-red-600 text-3xl">
//             <GrYoutube />
//           </div>
//           <div className="text-3xl font-extrabold font-mono tracking-tighter">
//             YouTube
//             <sup className="align-super font-light text-xs ml-0.5 font-sans tracking-tight">
//               IN
//             </sup>
//           </div>
//         </div>

//         {/* Search Bar */}
//         <div className="flex justify-center lg:w-[70%] lg:gap-5">
//           <div className="flex lg:w-[60%]">
//             <input
//               type="text"
//               value={inputValue}
//               onChange={(e) => setInputValue(e.target.value)}
//               placeholder="Search something"
//               className="w-full hidden md:flex  px-5 py-2 border border-gray-300 rounded-l-full focus:outline-none"
//             />
//             <button
//               onClick={handleSearch}
//               className="px-2 py-1 bg-gray-200 border border-gray-200 hover:bg-gray-300 
//              rounded-full md:px-5 md:py-2 
//              lg:rounded-r-full lg:rounded-l-none"
//             >
//               <CiSearch className="text-xl" />
//             </button>
//           </div>

//           <button className="bg-gray-200 w-10 h-12 hover:bg-gray-300 rounded-full hidden md:flex justify-center items-center">
//             <AiFillAudio className="text-2xl font-bold" />
//           </button>
//         </div>

//         {/* Right Section */}
//         <div className="flex justify-around items-center gap-5">
//           {/* Create Dropdown */}
//           <div className="relative">
//             <button
//               onClick={() => setShowCreateMenu(!showCreateMenu)}
//               className="flex gap-2 justify-center bg-gray-200 border border-gray-200 hover:bg-gray-300 items-center rounded-full w-25 h-9"
//             >
//               <span className="text-2xl">
//                 <GoPlus />
//               </span>
//               Create
//             </button>

//             {showCreateMenu && (
//               <div className="absolute right-0 mt-2 bg-white shadow-md rounded-md w-40 z-50">
//                 {!channelExists ? (
//                   <button
//                     onClick={() => {
//                       if (username) navigate("/create-channel");
//                       else navigate("/login");
//                       setShowCreateMenu(false);
//                     }}
//                     className="block w-full text-left px-4 py-2 hover:bg-gray-100"
//                   >
//                     Create Channel
//                   </button>
//                 ) : (
//                   <button
//                     onClick={() => {
//                       if (username) navigate("/upload-video");
//                       else navigate("/login");
//                       setShowCreateMenu(false);
//                     }}
//                     className="block w-full text-left px-4 py-2 hover:bg-gray-100"
//                   >
//                     Upload Video
//                   </button>
//                 )}
//               </div>
//             )}
//           </div>

//           {/* Bell */}
//           <button className="text-3xl hover:bg-gray-300 rounded-full">
//             <CiBellOn />
//           </button>

//           {/* User Menu */}
//           {username ? (
//             <div className="relative">
//               <div
//                 onClick={() => setShowMenu(!showMenu)}
//                 className="rounded-full bg-red-400 text-amber-50 px-3 py-1 text-2xl cursor-pointer"
//               >
//                 {username.charAt(0).toUpperCase()}
//               </div>

//               {showMenu && (
//                 <div className="absolute top-full px-4 py-5 z-50 mt-2 right-0 bg-gray-50 shadow-md flex flex-col gap-3 rounded-lg">
//                   {/* User Info */}
//                   <div className="flex items-center gap-3">
//                     <span className="rounded-full bg-red-400 text-amber-50 px-3 py-1 text-2xl">
//                       {username.charAt(0).toUpperCase()}
//                     </span>
//                     <span className="text-gray-700 font-semibold">{username}</span>
//                   </div>

//                   {/* Your Channel */}
//                   {channelExists && (
//                     <button
//                       onClick={handleClickYourChannel}
//                       className="block w-full text-left px-2 py-1 hover:bg-gray-100"
//                     >
//                       Your Channel
//                     </button>
//                   )}

//                   {/* Logout */}
//                   <Link
//                     to="/"
//                     onClick={handleLogout}
//                     className="hover:bg-blue-50 text-blue-500 text-center"
//                   >
//                     Logout
//                   </Link>
//                 </div>
//               )}
//             </div>
//           ) : (
//             <Link
//               to="/login"
//               className="inline-flex items-center justify-center rounded-full hover:bg-blue-50 border border-blue-400 w-[95px] h-9 text-blue-500"
//             >
//               Sign in
//             </Link>
//           )}
//         </div>
//       </header>
//     </div>
//   );
// }


//filter.jsx


import { useEffect, useState, useRef } from "react";
import { GoChevronLeft, GoChevronRight } from "react-icons/go";
import { useFilter } from "./FilterContext"; // Import context

export default function Filter() {
  const filterList = [
    "All",
    "Podcasts",
    "Satire",
    "Comedy",
    "Music",
    "Gaming",
    "News",
    "Live",
    "Sports",
    "Movies",
    "Technology",
    "Fashion",
    "Mixes",
    "Thriller",
    "Watched",
    "New to you",
    "Television series"
  ];

  const scrollRef = useRef(null);
  const [showLeft, setShowLeft] = useState(false);
  const [showRight, setShowRight] = useState(false);
  const { selectedFilter, setSelectedFilter } = useFilter(); //  Get context

  const checkScroll = () => {
    const { scrollLeft, scrollWidth, clientWidth } = scrollRef.current;
    setShowLeft(scrollLeft > 0);
    setShowRight(scrollLeft + clientWidth < scrollWidth - 1);
  };

  const scrollLeftHandler = () => {
    scrollRef.current.scrollBy({ left: -200, behavior: "smooth" });
  };

  const scrollRightHandler = () => {
    scrollRef.current.scrollBy({ left: 200, behavior: "smooth" });
  };

  useEffect(() => {
    const el = scrollRef.current;
    el.addEventListener("scroll", checkScroll);
    checkScroll();
    return () => el.removeEventListener("scroll", checkScroll);
  }, []);

  return (
    <div className="  relative w-full bg-white top-0 z-20 mb-4">
      {showLeft && (
        <button
          onClick={scrollLeftHandler}
          className="text-2xl rounded-full absolute left-0 top-1/2 transform -translate-y-1/2 hover:bg-gray-300 px-2 py-2 bg-white"
        >
          <GoChevronLeft />
        </button>
      )}

      <div
        ref={scrollRef}
        className="flex gap-3 w-full p-4 overflow-x-auto scrollbar-hide scroll-smooth bg-white"
      >
        {filterList.map((list, index) => (
          <button
            key={index}
            onClick={() => setSelectedFilter(list)} //  update context
            className={`px-4 py-2 rounded-lg whitespace-nowrap ${
              selectedFilter === list ? "bg-black text-white" : "bg-gray-200 hover:bg-gray-300"
            }`}
          >
            {list}
          </button>
        ))}
      </div>

      {showRight && (
        <button
          onClick={scrollRightHandler}
          className="text-2xl rounded-full hover:bg-gray-300 px-2 py-2 absolute top-1/2 transform -translate-y-1/2 shadow-md bg-white right-4 z-10"
        >
          <GoChevronRight />
        </button>
      )}
    </div>
  );
}




